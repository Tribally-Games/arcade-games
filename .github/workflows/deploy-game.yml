name: Deploy Game

on:
  repository_dispatch:
    types: [deploy-game]
  workflow_dispatch:
    inputs:
      repository:
        description: 'Source repository (e.g., Tribally-Games/snakes-on-a-chain)'
        required: true
        type: string
      version:
        description: 'Release version/tag to deploy'
        required: true
        type: string
      asset_name:
        description: 'Asset filename to download (e.g., game.zip)'
        required: true
        type: string
        default: 'game.zip'
      folder_name:
        description: 'Target folder name for deployment'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Clean existing folder
        run: |
          FOLDER_NAME="${{ github.event.client_payload.folder_name || inputs.folder_name }}"
          if [ -d "./${FOLDER_NAME}" ]; then
            rm -rf "./${FOLDER_NAME}"
            echo "Removed existing ${FOLDER_NAME} folder"
          else
            echo "No existing ${FOLDER_NAME} folder to remove"
          fi

      - name: Download and extract release asset
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_PAT }}
          REPOSITORY: ${{ github.event.client_payload.repository || inputs.repository }}
          VERSION: ${{ github.event.client_payload.version || inputs.version }}
          ASSET_NAME: ${{ github.event.client_payload.asset_name || inputs.asset_name }}
          FOLDER_NAME: ${{ github.event.client_payload.folder_name || inputs.folder_name }}
        run: |
          # Get release information
          echo "Getting release information for ${REPOSITORY} version ${VERSION}"
          RELEASE_DATA=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
            "https://api.github.com/repos/${REPOSITORY}/releases/tags/${VERSION}")
          
          # Find the asset URL
          ASSET_URL=$(echo "${RELEASE_DATA}" | jq -r ".assets[] | select(.name == \"${ASSET_NAME}\") | .url")
          
          if [ "${ASSET_URL}" = "null" ] || [ -z "${ASSET_URL}" ]; then
            echo "Error: Asset '${ASSET_NAME}' not found in release ${VERSION}"
            exit 1
          fi
          
          echo "Downloading asset: ${ASSET_NAME}"
          # Download the asset
          curl -L -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/octet-stream" \
            -o "${ASSET_NAME}" \
            "${ASSET_URL}"
          
          # Create target directory
          mkdir -p "${FOLDER_NAME}"
          
          # Extract the asset
          echo "Extracting ${ASSET_NAME} to ${FOLDER_NAME}/"
          if [[ "${ASSET_NAME}" == *.zip ]]; then
            unzip -q "${ASSET_NAME}" -d "${FOLDER_NAME}"
          elif [[ "${ASSET_NAME}" == *.tar.gz ]] || [[ "${ASSET_NAME}" == *.tgz ]]; then
            tar -xzf "${ASSET_NAME}" -C "${FOLDER_NAME}"
          elif [[ "${ASSET_NAME}" == *.tar ]]; then
            tar -xf "${ASSET_NAME}" -C "${FOLDER_NAME}"
          else
            echo "Warning: Unknown archive format, copying as-is"
            cp "${ASSET_NAME}" "${FOLDER_NAME}/"
          fi
          
          # Clean up downloaded file
          rm -f "${ASSET_NAME}"
          
          echo "✅ Successfully downloaded and extracted ${ASSET_NAME}"

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push changes
        run: |
          git add ${{ github.event.client_payload.folder_name || inputs.folder_name }}/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy ${{ github.event.client_payload.folder_name || inputs.folder_name }} v${{ github.event.client_payload.version || inputs.version }}

            Auto-deployed from ${{ github.event.client_payload.repository || inputs.repository }} release
            Release URL: https://github.com/${{ github.event.client_payload.repository || inputs.repository }}/releases/tag/${{ github.event.client_payload.version || inputs.version }}"
            git push
            echo "✅ Successfully deployed ${{ github.event.client_payload.folder_name || inputs.folder_name }} v${{ github.event.client_payload.version || inputs.version }}"
          fi

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.event.client_payload.version || inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: ${{ github.event.client_payload.repository || inputs.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ github.event.client_payload.folder_name || inputs.folder_name }}/ folder" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Completed successfully ✅" >> $GITHUB_STEP_SUMMARY